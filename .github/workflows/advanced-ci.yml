name: Advanced CI/CD with Multiple Tools

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Mondays at 2 AM

env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security Analysis
  code-analysis:
    name: 🔍 Code Analysis & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # CodeQL Analysis for security vulnerabilities
      - name: 🔐 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-and-quality
      
      - name: 📦 Restore dependencies
        run: |
          cd src/AgenticOrderingSystem.API
          dotnet restore
      
      - name: 🏗️ Build
        run: |
          cd src/AgenticOrderingSystem.API
          dotnet build --no-restore
      
      - name: 🔐 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      # SARIF upload for security results
      - name: 📋 Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

  # Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: code-analysis
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: 📦 Restore & Build
        run: |
          cd src/AgenticOrderingSystem.API
          dotnet restore
          dotnet build --no-restore --configuration Release
      
      - name: 🚀 Start API for testing
        run: |
          cd src/AgenticOrderingSystem.API
          dotnet run --no-build --configuration Release &
          sleep 10  # Wait for API to start
          
          # Health check
          curl -f http://localhost:5000/weatherforecast || exit 1
        
      - name: ⚡ Run performance tests with Artillery
        run: |
          npm install -g artillery
          
          # Create Artillery config
          cat > artillery-config.yml << EOF
          config:
            target: 'http://localhost:5000'
            phases:
              - duration: 60
                arrivalRate: 10
                name: "Warm up"
              - duration: 120
                arrivalRate: 50
                name: "Load test"
          scenarios:
            - name: "Weather API test"
              requests:
                - get:
                    url: "/weatherforecast"
                - get:
                    url: "/weatherforecast/london"
                - get:
                    url: "/weatherforecast/fahrenheit"
          EOF
          
          artillery run artillery-config.yml --output performance-report.json
          artillery report performance-report.json
      
      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-report.json

  # Docker Build & Push
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: code-analysis
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/AgenticOrderingSystem.API
          file: ./src/AgenticOrderingSystem.API/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
      
      - name: 🔍 Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/image.tar
          format: 'sarif'
          output: 'docker-scan-results.sarif'
      
      - name: 📋 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-scan-results.sarif'
      
      - name: 🚀 Push Docker image
        if: github.event_name != 'pull_request'
        run: |
          docker load -i /tmp/image.tar
          docker push --all-tags ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: 📦 Restore dependencies
        run: |
          cd src/AgenticOrderingSystem.API
          dotnet restore
      
      - name: 🔍 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AgenticOrderingSystem'
          path: './src/AgenticOrderingSystem.API'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
      
      - name: 📋 Upload dependency check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # Deployment Preview (for PRs)
  deploy-preview:
    name: 🚀 Deploy Preview Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [code-analysis, docker-build]
    environment: preview
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Preview
        run: |
          echo "🚀 Deploying PR #${{ github.event.number }} to preview environment..."
          echo "Preview URL: https://pr-${{ github.event.number }}.preview.yourdomain.com"
          
          # Here you would typically deploy to a preview environment
          # Examples: Azure Container Apps, AWS ECS, Kubernetes, etc.
      
      - name: 💬 Comment PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Preview Deployment
              
              Your PR has been deployed to a preview environment!
              
              🔗 **Preview URL**: https://pr-${{ github.event.number }}.preview.yourdomain.com
              
              📊 **Performance Test**: Check the artifacts for performance results
              🔍 **Security Scan**: All security checks passed
              🐳 **Docker Image**: Built and scanned successfully
              
              *This preview will be automatically cleaned up when the PR is closed.*`
            });

  # Production Deployment (only on main branch)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [code-analysis, performance-test, docker-build, dependency-scan]
    environment: production
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
      
      - name: 🌟 Deploy to Production
        run: |
          echo "🌟 Deploying to production environment..."
          echo "Production URL: https://api.yourdomain.com"
          
          # Here you would deploy to production
          # Examples: Azure App Service, AWS ECS, Kubernetes, etc.
      
      - name: 📢 Notify team of deployment
        uses: actions/github-script@v7
        with:
          script: |
            // Create a release or notify team
            console.log('Production deployment completed successfully!');
