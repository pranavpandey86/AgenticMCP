name: CI/CD Pipeline with SonarCloud Analysis

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allows manual triggering

env:
  DOTNET_VERSION: '8.0.x'
  SONAR_PROJECT_KEY: 'pranavpandey86_AgenticMCP'
  SONAR_ORGANIZATION: 'pranavpandey86'

jobs:
  build-and-test:
    name: Build, Test & Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: üõí Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better SonarCloud analysis
      
      # Setup Java for SonarCloud
      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      # Setup .NET
      - name: üîß Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # Cache dependencies
      - name: üíæ Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/src/AgenticOrderingSystem.API/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      # Cache SonarCloud packages
      - name: üíæ Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      # Cache SonarCloud scanner
      - name: üíæ Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      # Install SonarCloud scanner
      - name: ÔøΩÔøΩ Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      
      # Restore dependencies
      - name: üì¶ Restore dependencies
        run: |
          cd src/AgenticOrderingSystem.API
          dotnet restore AgenticOrderingSystem.API.csproj
          dotnet restore Tests/AgenticOrderingSystem.API.Tests.csproj
      
      # Security scan
      - name: üîí Security vulnerability scan
        run: |
          cd src/AgenticOrderingSystem.API
          dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.txt
          if grep -q "has the following vulnerable packages" security-scan.txt; then
            echo "‚ùå Security vulnerabilities found!"
            cat security-scan.txt
            exit 1
          else
            echo "‚úÖ No security vulnerabilities found"
          fi
      
      # Build, test and analyze with SonarCloud
      - name: üèóÔ∏è Build, Test & Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd src/AgenticOrderingSystem.API
          
          # Start SonarCloud analysis
          ../../.sonar/scanner/dotnet-sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORGANIZATION }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="coverage/*/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="coverage/*.trx" \
            /d:sonar.exclusions="**/bin/**,**/obj/**,Tests/**,**/Tests/**" \
            /d:sonar.coverage.exclusions="Tests/**,**/Tests/**"
          
          # Build project
          echo "üèóÔ∏è Building project..."
          dotnet build AgenticOrderingSystem.API.csproj --no-restore --configuration Release
          
          # Run tests with coverage
          echo "üß™ Running tests with coverage..."
          dotnet test Tests/AgenticOrderingSystem.API.Tests.csproj \
            --no-restore \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger trx \
            --verbosity normal
          
          # End SonarCloud analysis
          ../../.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      
      # Upload test results
      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: src/AgenticOrderingSystem.API/coverage/*.trx
      
      # Upload coverage reports
      - name: üìà Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: src/AgenticOrderingSystem.API/coverage/*/coverage.opencover.xml
